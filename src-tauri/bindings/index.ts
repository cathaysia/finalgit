// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/

export const commands = {
	async openRepo(repoPath: string): Promise<Result<null, string>> {
		try {
			return {
				status: "ok",
				data: await TAURI_INVOKE("open_repo", { repoPath }),
			};
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: "error", error: e as any };
		}
	},
	async getBranchInfo(): Promise<Result<BranchInfo[], string>> {
		try {
			return { status: "ok", data: await TAURI_INVOKE("get_branch_info") };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: "error", error: e as any };
		}
	},
	async isOpened(): Promise<Result<boolean, string>> {
		try {
			return { status: "ok", data: await TAURI_INVOKE("is_opened") };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: "error", error: e as any };
		}
	},
	async getTagInfo(): Promise<Result<TagInfo[], string>> {
		try {
			return { status: "ok", data: await TAURI_INVOKE("get_tag_info") };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: "error", error: e as any };
		}
	},
	async renameBranch(
		info: BranchInfo,
		to: string,
	): Promise<Result<null, string>> {
		try {
			return {
				status: "ok",
				data: await TAURI_INVOKE("rename_branch", { info, to }),
			};
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: "error", error: e as any };
		}
	},
	async removeBranch(info: BranchInfo): Promise<Result<null, string>> {
		try {
			return {
				status: "ok",
				data: await TAURI_INVOKE("remove_branch", { info }),
			};
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: "error", error: e as any };
		}
	},
	async createBranch(
		name: string,
		commit: string,
	): Promise<Result<null, string>> {
		try {
			return {
				status: "ok",
				data: await TAURI_INVOKE("create_branch", { name, commit }),
			};
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: "error", error: e as any };
		}
	},
	async checkoutBranch(branch: string): Promise<Result<null, string>> {
		try {
			return {
				status: "ok",
				data: await TAURI_INVOKE("checkout_branch", { branch }),
			};
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: "error", error: e as any };
		}
	},
	async getFileTree(commit: string): Promise<Result<FileTree[], string>> {
		try {
			return {
				status: "ok",
				data: await TAURI_INVOKE("get_file_tree", { commit }),
			};
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: "error", error: e as any };
		}
	},
	async getFileContent(
		commit: string,
		path: string,
	): Promise<Result<number[], string>> {
		try {
			return {
				status: "ok",
				data: await TAURI_INVOKE("get_file_content", { commit, path }),
			};
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: "error", error: e as any };
		}
	},
	async getCurrentStatus(): Promise<Result<FileStatus[], string>> {
		try {
			return { status: "ok", data: await TAURI_INVOKE("get_current_status") };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: "error", error: e as any };
		}
	},
};

/** user-defined events **/

/** user-defined constants **/

/** user-defined types **/

export type BranchInfo = {
	remote: string | null;
	name: string;
	kind: BranchTypeRef;
	commit: string;
	is_head: boolean;
	upstream: string | null;
};
export type BranchTypeRef = "Local" | "Remote";
export type FileStatus = { path: string; status: number };
export type FileTree =
	| { File: { filename: string; mode: number } }
	| { Dir: { dir: string; files: FileTree[]; mode: number } };
export type TagInfo = { name: string; commit: string };

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: T extends null
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
